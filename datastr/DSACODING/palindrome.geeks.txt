
public class Multiplepalindrome {

	
		
		// Main class
		// To check for palindromic sub-strings
	

			// Method 1
			// To check for substring
			public static boolean check(String subS)
			{
				int size = subS.length();

				// Iterating over string till midway to
				// check pallindromic behavior
				for (int i = 0; i < size / 2; i++) {

					if (subS.charAt(i)
						!= subS.charAt(size - i - 1)) {

						// Non-pallindromic behavior
						return false;
					}
				}

				// Pallindromic behavior
				return true;
			}

			// Method 2
			// Main driver method
			public static void main(String[] args)
			{

				// Custom input string
				String str = "MADAM";

				int count = 0;

				// Outer loop iterating over input string
				for (int i = 0; i < str.length(); i++) {

					// Inner loop iterating from current starting
					// character of outer loop current starting
					// character
					for (int j = i; j < str.length(); j++) {

						// Getting the substrings
						String subString = str.substring(i, j + 1);

						// Checking whether the substring is
						// pallindrome
						if (check(subString)) {

							// Increment the count only if
							// substring is pallindrome
							count++;
						}
					}
				}

				// Print and display the number of substrings that
				// are pallindromic
				System.out.println(
					"No.of palindromic substrings in the given string are "
					+ count);
			}
		}

	

//by MYSELF



public class Multiplepalindrome {

      static int count=0;
	public static boolean check(String subs) {
		
		int st=0,en=subs.length()-1;
		while(st<en) {
//			String k="subs.substring(st,st+1)";
//			String l="subs.substring(en,en+1)";
//			if(subs.substring(st,st+1)!=subs.substring(en))
//			if(subs.charAt(st)!=subs.charAt(en))
			if(!subs.substring(st,st+1).equals(subs.substring(en,en+1)))
				return false;
			
			else {
				st++;
				en--;
			
			}
			
		}
		return true;
	}
	public static void pal(String s,int n) 
	{
	for(int i=0;i<=n;i++) {
		
		for(int j=i+1;j<=n;j++) {
			
			String subs=s.substring(i,j);
			if(check(subs)) {
				
				count++;
			}
		}
	}
	
	System.out.println(count);
	}
	
		public static void main(String args[]) {
			
			
			String s="good";
			int n=s.length();
			
			
			 pal(s,n);
			 
			
		}
		}