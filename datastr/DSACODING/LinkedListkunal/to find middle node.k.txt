/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */



//SLOW - FAST APPROACH

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        
        
        ListNode slow = head;
        ListNode fast = head;

        
        while(fast!=null  && fast.next!=null){
            
            slow=slow.next;
            fast=fast.next.next;
            
            
        }
        
        return slow;
}
}

class Solution {
    public ListNode middleNode(ListNode head) {
        
        
        ListNode node = head;
        int len =0;
        while(node!=null){
            len++;
            node=node.next;
            
        }
            
       
    ListNode middle = head; 
        int k = len/2;//Do NOT TAKE len/2 DIRECTLY
    while(k > 0){
        
        middle=middle.next;
        k--;
        
    }
        
        return middle;
    }
}