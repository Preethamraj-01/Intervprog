//O(log n) using binary search

class Solution {
    public int  mySqrt(int x) {
       
        int s=0;
        int e=x;
        long mid=(s+e)/2;
        int ans=0;
        
        while(s<=e){
            
            long sq=mid*mid;
            
            if(sq==x){
                
                return (int)mid;
            }
            
            if(sq>=x){
                
                e=(int)mid-1;
            }
            
            else if(sq<=x){
                ans=(int)mid;
                s=(int)mid+1;
            }
            
          mid=(s+e)/2;
        }
        
        return ans;
    }
}

//    while(s<=e){
//         long mid = s + (e-s)/2;
//         if(mid*mid == x)
//             return mid;
//         else{
//             if(mid*mid > x)
//             e = mid-1;
//             else
//                 s = mid+1;
//         }
//     }
//     return e;
// }

//o(N)

public class sqrt {
	

    public static long  mySqrt(long  x) {
        
        long N=x;
        long  i;
//        if(N==0)
//            return 0;
//        
//        if(N<=3)
//            return 1;
//        
         for(i=0;i<=N/2 +1;i++){
            
            if((i*i)==N){
                return i;
            }
            
            else if((i*i)>N){
                return i-1;
            }
        }
        return -1;
	}
        
        
	

	public static void main (String args[]) {
	
		
		long res=mySqrt(2147483647);
	//	int res=mySqrt(3);
		System.out.println(res);
	    }

}
